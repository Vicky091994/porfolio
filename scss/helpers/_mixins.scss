/* =============
    Mixins
============= */
@use "sass:math";

/* ---------------- Font Sizing ---------------- */
// rem mixins
$rem-base: 16px !default;

// rem-separator function
@function rem-separator($list) {
    @if function-exists("list-separator") == true {
        @return list-separator($list);
    }
    $test-list: ();
    @each $item in $list {
        $test-list: append($test-list, $item, space);
    }
    @return if($test-list == $list, space, comma);
}

// rem-base mixin
@mixin rem-base($zoom: 100%) {
    font-size: math.div($zoom, 16px) * $rem-base;
}

// rem-convert function
@function rem-convert($to, $values...) {
    $result: ();
    $separator: rem-separator($values);
    @each $value in $values {
        @if type-of($value) == "number" and unit($value) == "rem" and $to == "px" {
            $result: append($result, math.div($value, 1rem) * $rem-base, $separator);
        } @else if type-of($value) == "number" and unit($value) == "px" and $to == "rem" {
            $result: append($result, math.div($value, math.div($rem-base, 1rem)), $separator);
        } @else if type-of($value) == "list" {
            $result: append($result, rem-convert($to, $value...), $separator);
        } @else {
            $result: append($result, $value, $separator);
        }
    }
    @return if(length($result) == 1, nth($result, 1), $result);
}

// rem function
@function rem($values...) {
    @return rem-convert(rem, $values...);
}

// rem mixin
@mixin rem($properties, $values...) {
    @if type-of($properties) == "map" {
        @each $property in map-keys($properties) {
            @include rem($property, map-get($properties, $property));
        }
    } @else {
        @each $property in $properties {
            #{$property}: rem-convert(rem, $values...);
        }
    }
}

// strip-unit function
@function strip-unit($num) {
    @return math.div($num, ($num * 0 + 1));
}

// rem-calc function
@function rem-calc($values, $base-value: $rem-base) {
    $max: length($values);
    @if $max == 1 {
        @return convert-to-rem(nth($values, 1), $base-value);
    }
    $remValues: ();
    @for $i from 1 through $max {
        $remValues: append($remValues, convert-to-rem(nth($values, $i), $base-value));
    }
    @return $remValues;
}

html {
    @include rem-base;
}

/* ---------------- Media Queries ---------------- */
// Small devices
@mixin sm {
    @media (min-width: #{$screen-sm-min}) {
        @content;
    }
}

// Medium devices
@mixin md {
    @media (min-width: #{$screen-md-min}) {
        @content;
    }
}

// Large devices
@mixin lg {
    @media (min-width: #{$screen-lg-min}) {
        @content;
    }
}

// Extra large devices
@mixin xl {
    @media (min-width: #{$screen-xl-min}) {
        @content;
    }
}

// Super Extra large devices
@mixin xxl {
    @media (min-width: #{$screen-xxl-min}) {
        @content;
    }
}